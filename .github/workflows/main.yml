name: Deploy Request Approval System App to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build_and_test:
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Build and Test with Maven
        run: |
          chmod +x ./mvnw

          # Fetch secrets from AWS Secrets Manager
          echo "Fetching RDS credentials from Secrets Manager..."
          SECRET=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.DB_SECRETS_ID }} --query SecretString --output text)
          export SPRING_DATASOURCE_USERNAME=$(echo $SECRET | jq -r '.username')
          export SPRING_DATASOURCE_PASSWORD=$(echo $SECRET | jq -r '.password')
          export SPRING_DATASOURCE_URL=jdbc:postgresql://${{ secrets.DB_ENDPOINT }}:5432/${{ secrets.DB_NAME }}

          # Setting mail sender env variables for testing
          export MAIL_SENDER_USERNAME='${{ secrets.MAIL_SENDER_USERNAME }}'
          export MAIL_SENDER_PASSWORD='${{ secrets.MAIL_SENDER_PASSWORD }}'

          ./mvnw -B -Dspring.profiles.active=test package --file pom.xml

  build_and_push_docker_image:
    runs-on: self-hosted
    needs: build_and_test
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Docker Image and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/requestapprovalsystem:latest
          
  deploy:
    runs-on: self-hosted
    needs: build_and_push_docker_image
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.EC2_PUBLIC_IP }}" >> ~/.ssh/known_hosts || echo "ssh-keyscan failed"

      - name: Copy docker-compose.prod.yml to EC2
        run: |

          # Copy docker compose file and nginx folder from GitHub repo onto EC2 instance
          scp -o StrictHostKeyChecking=no ./docker-compose.prod.yml ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/deployment/
          scp -r -o StrictHostKeyChecking=no ./nginx ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/deployment/

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e
  
            # Fetch secrets from AWS Secrets Manager
            echo "Fetching RDS credentials from Secrets Manager..."
            SECRET=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.DB_SECRETS_ID }} --query SecretString --output text)
            export DB_USERNAME=$(echo $SECRET | jq -r '.username')
            export DB_PASSWORD=$(echo $SECRET | jq -r '.password')

            # Set required environment variables
            export DB_URL=jdbc:postgresql://${{ secrets.DB_ENDPOINT }}:5432/${{ secrets.DB_NAME }}
            export MAIL_SENDER_USERNAME='${{ secrets.MAIL_SENDER_USERNAME }}'
            export MAIL_SENDER_PASSWORD='${{ secrets.MAIL_SENDER_PASSWORD }}'

            # Pull latest Docker images defined in Docker Compose file
            echo "Pulling the latest Docker images..."
            docker compose -f /home/ec2-user/deployment/docker-compose.prod.yml pull
  
            # Stop and remove the existing Docker container
            echo "Stopping and removing existing Docker container..."
            docker compose -f /home/ec2-user/deployment/docker-compose.prod.yml down || true
  
            # Build and run the new Docker container
            echo "Starting the Docker container..."
            docker compose -f /home/ec2-user/deployment/docker-compose.prod.yml up -d
          EOF
